type ManifestContentScript = ({
    world: "MAIN";
    persist_across_sessions?: boolean;
} | {
    world?: "ISOLATED";
    match_about_blank?: boolean;
    match_origin_as_fallback?: boolean;
    /**
     * https://developer.chrome.com/docs/extensions/mv3/content_scripts/#matchAndGlob
     */
    exclude_globs?: string[];
    include_globs?: string[];
}) & {
    matches: string[];
    js?: string[];
    css?: string[];
    all_frames?: boolean;
    /**
     * https://developer.chrome.com/docs/extensions/mv3/content_scripts/#run_time
     */
    run_at?: "document_start" | "document_end" | "document_idle";
    exclude_matches?: string[];
};

type PlasmoCSConfig = Omit<Partial<ManifestContentScript>, "js">;
/**
 * @deprecated use **PlasmoCSConfig** instead
 */
type PlasmoContentScript = PlasmoCSConfig;
type Async<T> = Promise<T> | T;
type Getter<T, P = any> = (props?: P) => Async<T>;
type GetElement = Getter<Element>;
type PlasmoCSUIAnchor = {
    element: Element;
    type: "overlay" | "inline";
};
type PlasmoCSUIProps = {
    anchor?: PlasmoCSUIAnchor;
};
type PlasmoCSUIMountState = {
    document: Document;
    observer: MutationObserver | null;
    isMounting: boolean;
    isMutated: boolean;
    /**
     * Used to quickly check if element is already mounted
     */
    hostSet: Set<Element>;
    /**
     * Used to add more metadata to the host Set
     */
    hostMap: WeakMap<Element, PlasmoCSUIAnchor>;
    /**
     * Used to align overlay anchor with elements on the page
     */
    overlayTargetList: Element[];
};
type PlasmoGetRootContainer = (props: {
    mountState?: PlasmoCSUIMountState;
} & PlasmoCSUIProps) => Async<Element>;
type PlasmoGetOverlayAnchor = GetElement;
type PlasmoGetOverlayAnchorList = Getter<NodeList>;
type PlasmoGetInlineAnchor = GetElement;
type PlasmoGetInlineAnchorList = Getter<NodeList>;
type PlasmoMountShadowHost = (props: {
    observer: MutationObserver | null;
    shadowHost: Element;
} & PlasmoCSUIProps) => Async<void>;
type PlasmoGetShadowHostId = Getter<string, PlasmoCSUIAnchor>;
type PlasmoGetStyle = Getter<HTMLStyleElement, PlasmoCSUIAnchor>;
/**
 * @return a cleanup unwatch function that will be run when unmounted
 */
type PlasmoWatchOverlayAnchor = (updatePosition: () => Promise<void>) => () => void;
type PlasmoCSUIContainerProps = {
    id?: string;
    children?: React.ReactNode;
    watchOverlayAnchor?: PlasmoWatchOverlayAnchor;
} & PlasmoCSUIProps;
type PlasmoCSUIContainer = (p: PlasmoCSUIContainerProps) => JSX.Element | Element;
type PlasmoCreateShadowRoot = (shadowHost: HTMLElement) => Async<ShadowRoot>;
type PlasmoRender = (props: {
    createRootContainer?: (p: PlasmoCSUIAnchor) => Async<Element>;
} & PlasmoCSUIProps, InlineCSUIContainer?: PlasmoCSUIContainer, OverlayCSUIContainer?: PlasmoCSUIContainer) => Async<void>;
type PlasmoCSUI = {
    default: any;
    getStyle: PlasmoGetStyle;
    getShadowHostId: PlasmoGetShadowHostId;
    getOverlayAnchor: PlasmoGetOverlayAnchor;
    getOverlayAnchorList: PlasmoGetOverlayAnchorList;
    getInlineAnchor: PlasmoGetInlineAnchor;
    getInlineAnchorList: PlasmoGetInlineAnchorList;
    getRootContainer: PlasmoGetRootContainer;
    createShadowRoot: PlasmoCreateShadowRoot;
    watchOverlayAnchor: PlasmoWatchOverlayAnchor;
    mountShadowHost: PlasmoMountShadowHost;
    render: PlasmoRender;
};

export { PlasmoCSConfig, PlasmoCSUI, PlasmoCSUIAnchor, PlasmoCSUIContainer, PlasmoCSUIContainerProps, PlasmoCSUIMountState, PlasmoCSUIProps, PlasmoContentScript, PlasmoCreateShadowRoot, PlasmoGetInlineAnchor, PlasmoGetInlineAnchorList, PlasmoGetOverlayAnchor, PlasmoGetOverlayAnchorList, PlasmoGetRootContainer, PlasmoGetShadowHostId, PlasmoGetStyle, PlasmoMountShadowHost, PlasmoRender, PlasmoWatchOverlayAnchor };
